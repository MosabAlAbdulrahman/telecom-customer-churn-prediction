# -*- coding: utf-8 -*-
"""App

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1f0TVvhsQvB6OiIK1gSoNhhcSxS6o_nwh
"""

import gradio as gr
import joblib
import pandas as pd

# Load the trained model
model = joblib.load("churn_prediction_xgb.pkl")

# List of expected columns (same order as in training)
expected_columns = [
    'SeniorCitizen', 'Partner', 'Dependents', 'PhoneService', 'MultipleLines', 'OnlineSecurity',
    'OnlineBackup', 'DeviceProtection', 'TechSupport', 'StreamingTV', 'StreamingMovies', 'PaperlessBilling',
    'MonthlyCharges', 'TotalCharges', 'InternetService_Fiber optic', 'InternetService_No',
    'Contract_One year', 'Contract_Two year', 'PaymentMethod_Credit card (automatic)',
    'PaymentMethod_Electronic check', 'PaymentMethod_Mailed check', 'TenureGroup_Experienced', 'TenureGroup_Loyal'
]

# Define function to preprocess input data
def preprocess_input(SeniorCitizen, Partner, Dependents, tenure, PhoneService, MultipleLines,
                      InternetService, OnlineSecurity, OnlineBackup, DeviceProtection, TechSupport,
                      StreamingTV, StreamingMovies, Contract, PaperlessBilling, PaymentMethod,
                      MonthlyCharges, TotalCharges):

    # Convert categorical inputs to match training encoding
    encoded_input = {
        "SeniorCitizen": int(SeniorCitizen),
        "Partner": 1 if Partner == "Yes" else 0,
        "Dependents": 1 if Dependents == "Yes" else 0,
        "PhoneService": 1 if PhoneService == "Yes" else 0,
        "MultipleLines": 1 if MultipleLines == "Yes" else 0,
        "OnlineSecurity": 1 if OnlineSecurity == "Yes" else 0,
        "OnlineBackup": 1 if OnlineBackup == "Yes" else 0,
        "DeviceProtection": 1 if DeviceProtection == "Yes" else 0,
        "TechSupport": 1 if TechSupport == "Yes" else 0,
        "StreamingTV": 1 if StreamingTV == "Yes" else 0,
        "StreamingMovies": 1 if StreamingMovies == "Yes" else 0,
        "PaperlessBilling": 1 if PaperlessBilling == "Yes" else 0,
        "MonthlyCharges": float(MonthlyCharges),
        "TotalCharges": float(TotalCharges),
        "InternetService_Fiber optic": 1 if InternetService == "Fiber optic" else 0,
        "InternetService_No": 1 if InternetService == "No" else 0,
        "Contract_One year": 1 if Contract == "One year" else 0,
        "Contract_Two year": 1 if Contract == "Two year" else 0,
        "PaymentMethod_Credit card (automatic)": 1 if PaymentMethod == "Credit card (automatic)" else 0,
        "PaymentMethod_Electronic check": 1 if PaymentMethod == "Electronic check" else 0,
        "PaymentMethod_Mailed check": 1 if PaymentMethod == "Mailed check" else 0,
        "TenureGroup_Experienced": 1 if 12 < tenure <= 36 else 0,  # Convert tenure to group
        "TenureGroup_Loyal": 1 if tenure > 36 else 0  # Convert tenure to group
    }

    # Convert to DataFrame
    input_df = pd.DataFrame([encoded_input])

    # Ensure input matches training columns
    for col in expected_columns:
        if col not in input_df:
            input_df[col] = 0  # Add missing columns with default value

    # Reorder the columns to match the training order
    input_df = input_df[expected_columns]

    return input_df

# Define prediction function
def predict_churn(SeniorCitizen, Partner, Dependents, tenure, PhoneService, MultipleLines,
                  InternetService, OnlineSecurity, OnlineBackup, DeviceProtection, TechSupport,
                  StreamingTV, StreamingMovies, Contract, PaperlessBilling, PaymentMethod,
                  MonthlyCharges, TotalCharges):

    try:
        # Preprocess input data
        input_data = preprocess_input(SeniorCitizen, Partner, Dependents, tenure, PhoneService, MultipleLines,
                                      InternetService, OnlineSecurity, OnlineBackup, DeviceProtection, TechSupport,
                                      StreamingTV, StreamingMovies, Contract, PaperlessBilling, PaymentMethod,
                                      MonthlyCharges, TotalCharges)

        # Make prediction
        prediction = model.predict(input_data)[0]
        churn_prob = model.predict_proba(input_data)[:, 1][0]

        return f"Prediction: {'Churn' if prediction == 1 else 'No Churn'} (Probability: {churn_prob:.2f})"

    except Exception as e:
        return f"An error occurred during prediction: {str(e)}"

# Define Gradio Interface
demo = gr.Interface(
    fn=predict_churn,
    inputs=[
        gr.Number(label="Senior Citizen (0=No, 1=Yes)"),
        gr.Dropdown(["Yes", "No"], label="Partner"),
        gr.Dropdown(["Yes", "No"], label="Dependents"),
        gr.Number(label="Tenure (Months)"),
        gr.Dropdown(["Yes", "No"], label="Phone Service"),
        gr.Dropdown(["No", "Yes"], label="Multiple Lines"),
        gr.Dropdown(["DSL", "Fiber optic", "No"], label="Internet Service"),
        gr.Dropdown(["Yes", "No"], label="Online Security"),
        gr.Dropdown(["Yes", "No"], label="Online Backup"),
        gr.Dropdown(["Yes", "No"], label="Device Protection"),
        gr.Dropdown(["Yes", "No"], label="Tech Support"),
        gr.Dropdown(["Yes", "No"], label="Streaming TV"),
        gr.Dropdown(["Yes", "No"], label="Streaming Movies"),
        gr.Dropdown(["Month-to-month", "One year", "Two year"], label="Contract"),
        gr.Dropdown(["Yes", "No"], label="Paperless Billing"),
        gr.Dropdown(["Electronic check", "Mailed check", "Bank transfer (automatic)", "Credit card (automatic)"], label="Payment Method"),
        gr.Number(label="Monthly Charges"),
        gr.Number(label="Total Charges")
    ],
    outputs="text",
    title="Customer Churn Prediction",
    description="Enter customer details to predict whether they will churn."
)

# Launch Gradio App
demo.launch()